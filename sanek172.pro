domains
  им€ = воронов; павлов; журавлев; синицын
  професси€ = математик;художник;писатель;ба€нист
  профессии = професси€*
  логический = да;нет
  
  структура_гипотезы = кто_есть_кто(им€, професси€); знакомы(им€, им€, логический)
  гипотеза = структура_гипотезы*
  структура_решени€ = кто_есть_кто(им€, професси€)
  решение = структура_решени€*
  решени€ = решение*
predicates
  nondeterm входит_в(структура_гипотезы, гипотеза)
  nondeterm входит_в(професси€, профессии)
  nondeterm входит_в(решение, решени€)
  nondeterm без_повторов(профессии)
  
  nondeterm возможный_логический(логический)
  
  nondeterm генераци€_гипотезы(гипотеза)
  nondeterm проверка_гипотезы(гипотеза)
  nondeterm условие(integer, гипотеза)
  
  nondeterm знакомы(им€, им€, гипотеза) % считаем что знакомы если нет информации об обратном
  nondeterm не_знакомы(им€, им€, гипотеза)
  
  nondeterm поиск_решени€(решение)
  nondeterm убрать_повторы(решени€, решени€, решени€)
  nondeterm разные_решени€(решение)
constants
  все_профессии = [математик,художник,писатель,ба€нист]
clauses
    входит_в(ѕервыйЁлемент, [ѕервыйЁлемент|_ќстальныеЁлементы]). 
    входит_в(ѕервыйЁлемент, [_ѕервыйЁлемент|ќстальныеЁлементы]):- 
       входит_в(ѕервыйЁлемент, ќстальныеЁлементы).
       
    без_повторов([]).
    без_повторов([ѕервый|ќстальные]):-
      NOT(входит_в(ѕервый, ќстальные)),
      без_повторов(ќстальные).
      
    убрать_повторы([], Ѕуфер, Ѕезѕовторов):-
      Ѕезѕовторов = Ѕуфер.
    убрать_повторы([ѕервыйЁлемент|ќстальныеЁлементы], Ѕуфер, Ѕезѕовторов):-
      входит_в(ѕервыйЁлемент, Ѕуфер), 
      убрать_повторы(ќстальныеЁлементы, Ѕуфер, Ѕезѕовторов).
    убрать_повторы([ѕервыйЁлемент|ќстальныеЁлементы], Ѕуфер, Ѕезѕовторов):-
      NOT(входит_в(ѕервыйЁлемент, Ѕуфер)),
      убрать_повторы(ќстальныеЁлементы, [ѕервыйЁлемент|Ѕуфер], Ѕезѕовторов).
      
    возможный_логический(да).
    возможный_логический(нет).
    
    не_знакомы(ј, Ѕ, √ипотеза):-
      входит_в(знакомы(ј, Ѕ, нет), √ипотеза);
      входит_в(знакомы(Ѕ, ј, нет), √ипотеза).
      
    знакомы(ј, Ѕ, √ипотеза):-
      NOT(не_знакомы(ј, Ѕ, √ипотеза)).
      
    генераци€_гипотезы(√ипотеза):-
        входит_в(ѕрофесси€¬оронова, все_профессии),
        входит_в(ѕрофесси€ѕавлова, все_профессии),
        входит_в(ѕрофесси€∆уравлева, все_профессии),
        входит_в(ѕрофесси€—иницына, все_профессии),
        
        возможный_логический(¬ороновѕавлов),
        возможный_логический(¬оронов∆уравлев),
        возможный_логический(¬оронов—иницын),
        возможный_логический(ѕавлов∆уравлев),
        возможный_логический(ѕавлов—иницын),
        возможный_логический(∆уравлев—иницын),
        
        без_повторов([
          ѕрофесси€¬оронова, ѕрофесси€ѕавлова, 
          ѕрофесси€∆уравлева, ѕрофесси€—иницына
        ]),
        
      √ипотеза = [
        кто_есть_кто(воронов, ѕрофесси€¬оронова),
        кто_есть_кто(павлов, ѕрофесси€ѕавлова),
        кто_есть_кто(журавлев, ѕрофесси€∆уравлева),
        кто_есть_кто(синицын, ѕрофесси€—иницына),
        знакомы(воронов, павлов, ¬ороновѕавлов),
        знакомы(воронов, журавлев, ¬оронов∆уравлев),
        знакомы(воронов, синицын, ¬оронов—иницын),
        знакомы(павлов, журавлев, ѕавлов∆уравлев),
        знакомы(павлов, синицын, ѕавлов—иницын),
        знакомы(журавлев, синицын, ∆уравлев—иницын)
       ].
    
% Ќи ¬оронов, ни ∆уравлев не умеют играть на ба€не. 
    условие(1, √ипотеза):-
       NOT(входит_в(кто_есть_кто(воронов, ба€нист), √ипотеза)),
       NOT(входит_в(кто_есть_кто(журавлев, ба€нист), √ипотеза)).
       
% ¬оронов незнаком с ∆уравлевым. 
      условие(2, √ипотеза):-
         не_знакомы(воронов, журавлев, √ипотеза).
         
% ѕисатель и художник в воскресенье уезжают на дачу к ѕавлову. 
     условие(3, √ипотеза):-
       входит_в(кто_есть_кто(ѕисатель, писатель), √ипотеза),
       входит_в(кто_есть_кто(’удожник, художник), √ипотеза),
       % если едут - значит не могут быть не знакомы
       знакомы(ѕисатель, ’удожник, √ипотеза),
       знакомы(ѕисатель, павлов, √ипотеза),
       знакомы(’удожник, павлов, √ипотеза).
       
% ѕисатель собираетс€ писать очерк о —иницыне и ¬оронове. 
условие(4, √ипотеза):-
       входит_в(кто_есть_кто(ѕисатель, писатель), √ипотеза),
       % писатель знает синицына и воронова
       знакомы(ѕисатель, синицын, √ипотеза),
       знакомы(ѕисатель, воронов, √ипотеза).
       
   проверка_гипотезы(√ипотеза):-
      условие(1, √ипотеза),
      условие(2, √ипотеза),
      условие(3, √ипотеза),
      условие(4, √ипотеза).
      
   поиск_решени€(–ешение):-
     генераци€_гипотезы(√ипотеза),
  проверка_гипотезы(√ипотеза),
  
  √ипотеза = [
        кто_есть_кто(воронов, ѕрофесси€¬оронова),
        кто_есть_кто(павлов, ѕрофесси€ѕавлова),
        кто_есть_кто(журавлев, ѕрофесси€∆уравлева),
        кто_есть_кто(синицын, ѕрофесси€—иницына),
        знакомы(воронов, павлов, _¬ороновѕавлов),
        знакомы(воронов, журавлев, _¬оронов∆уравлев),
        знакомы(воронов, синицын, _¬оронов—иницын),
        знакомы(павлов, журавлев, _ѕавлов∆уравлев),
        знакомы(павлов, синицын, _ѕавлов—иницын),
        знакомы(журавлев, синицын, _∆уравлев—иницын)
       ],
       
       –ешение = [
           кто_есть_кто(воронов, ѕрофесси€¬оронова),
        кто_есть_кто(павлов, ѕрофесси€ѕавлова),
        кто_есть_кто(журавлев, ѕрофесси€∆уравлева),
        кто_есть_кто(синицын, ѕрофесси€—иницына)
       ].
       
   разные_решени€(”никальное–ешение):-
     findall(–ешение, поиск_решени€(–ешение), ¬се–ешени€),
     убрать_повторы(¬се–ешени€, [], ”никальные–ешени€),
     входит_в(”никальное–ешение, ”никальные–ешени€).
   
goal 
  разные_решени€(–ешение).