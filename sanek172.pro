/*				Новый дом.
	Недалеко от нашей школы строился четырехквартирный дом. Когда строительство 
было закончено и жильцы въехали в дом, у подъезда был вывешен список жильцов. Таким 
образом, мы узнали, что в доме живут Воронов, Павлов, Журавлев и Синицын. 
Учительница сказала нам, что один из них – математик, другой – художник, третий –
писатель, а четвертый – баянист. Но у кого какая фамилия она не знала. Мы решили это 
выяснить, и в течение следующей недели нам удалось выяснить следующее.
	Ни Воронов, ни Журавлев не умеют играть на баяне. Воронов незнаком с 
Журавлевым. Писатель и художник в воскресенье уезжают на дачу к Павлову. Писатель 
собирается писать очерк о Синицыне и Воронове. По этим скудным сведениям Холмс 
вычислил, кто есть кто. Что же он узнал?              */

domains
  имя = воронов; павлов; журавлев; синицын
  профессия = математик;художник;писатель;баянист
  профессии = профессия*
  ответ = да;нет
  
  структура_гипотезы = кто_есть_кто(имя, профессия); приятели (имя, имя, ответ)
  гипотеза = структура_гипотезы*
  структура_решения = кто_есть_кто(имя, профессия)
  решение = структура_решения*
  решения = решение*
predicates
% Вспомогательные функции для работы со списками
  nondeterm входит_в(структура_гипотезы, гипотеза)
  nondeterm входит_в(профессия, профессии)
  nondeterm входит_в(решение, решения)
  nondeterm без_повторов(профессии)
  
  nondeterm возможный_ответ(ответ)
  
  nondeterm генерация_гипотезы(гипотеза)
  nondeterm проверка_гипотезы(гипотеза)
  nondeterm условие(integer, гипотеза)
  
  nondeterm приятели (имя, имя, гипотеза) % считаем что приятели  если нет информации об обратном
  nondeterm незнакомцы(имя, имя, гипотеза)
  
  nondeterm поиск_решения(решение)
  nondeterm убрать_повторы(решения, решения, решения)
  nondeterm разные_решения(решение)
clauses
    входит_в(Name, [Name|_Хвост]). 
    входит_в(Name, [_Name|Хвост]):- 
       входит_в(Name, Хвост).

% Проверка отсутствия одинаковых элементов  
% В пустом списке нет повторов, вызывается для завершения рекурсии
    без_повторов([]).
    без_повторов([Name1|Хвост1]):-
      NOT(входит_в(Name1, Хвост1)),
      без_повторов(Хвост1).

% Оставить только уникальные элемента списка       
    убрать_повторы([], Буфер, БезПовторов):-
      БезПовторов = Буфер.
    убрать_повторы([Name|Хвост], Буфер, БезПовторов):-
      входит_в(Name, Буфер), 
      убрать_повторы(Хвост, Буфер, БезПовторов).
    убрать_повторы([Name|Хвост], Буфер, БезПовторов):-
      NOT(входит_в(Name, Буфер)),
      убрать_повторы(Хвост, [Name|Буфер], БезПовторов).
      
    возможный_ответ(да).
    возможный_ответ(нет).
    
    незнакомцы(А, Б, Гипотеза):-
      входит_в(приятели (А, Б, нет), Гипотеза);
      входит_в(приятели (Б, А, нет), Гипотеза).
      
    приятели (А, Б, Гипотеза):-
      NOT(незнакомцы(А, Б, Гипотеза)).

% Генерация гипотезы      
    генерация_гипотезы(Гипотеза):-
        ВсеПрофессии = [математик,художник,писатель,баянист],
        входит_в(ПрофессияВоронова, ВсеПрофессии),
        входит_в(ПрофессияПавлова, ВсеПрофессии),
        входит_в(ПрофессияЖуравлева, ВсеПрофессии),
        входит_в(ПрофессияСиницына, ВсеПрофессии),
        
        возможный_ответ(ВороновПавлов),
        возможный_ответ(ВороновЖуравлев),
        возможный_ответ(ВороновСиницын),
        возможный_ответ(ПавловЖуравлев),
        возможный_ответ(ПавловСиницын),
        возможный_ответ(ЖуравлевСиницын),
        
        без_повторов([
          ПрофессияВоронова, ПрофессияПавлова, 
          ПрофессияЖуравлева, ПрофессияСиницына
        ]),

% Гипотеза представляет собой список возможных профессий и знакомств       
      Гипотеза = [
        кто_есть_кто(воронов, ПрофессияВоронова),
        кто_есть_кто(павлов, ПрофессияПавлова),
        кто_есть_кто(журавлев, ПрофессияЖуравлева),
        кто_есть_кто(синицын, ПрофессияСиницына),
        приятели (воронов, павлов, ВороновПавлов),
        приятели (воронов, журавлев, ВороновЖуравлев),
        приятели (воронов, синицын, ВороновСиницын),
        приятели (павлов, журавлев, ПавловЖуравлев),
        приятели (павлов, синицын, ПавловСиницын),
        приятели (журавлев, синицын, ЖуравлевСиницын)
       ].
    
% Ни Воронов, ни Журавлев не умеют играть на баяне. 
    условие(1, Гипотеза):-
       NOT(входит_в(кто_есть_кто(воронов, баянист), Гипотеза)),
       NOT(входит_в(кто_есть_кто(журавлев, баянист), Гипотеза)).
       
% Воронов незнаком с Журавлевым. 
      условие(2, Гипотеза):-
         незнакомцы(воронов, журавлев, Гипотеза).
         
% Писатель и художник в воскресенье уезжают на дачу к Павлову. 
     условие(3, Гипотеза):-
       входит_в(кто_есть_кто(Писатель, писатель), Гипотеза),
       входит_в(кто_есть_кто(Художник, художник), Гипотеза),
       % если едут - значит не могут быть не приятели 
       приятели (Писатель, Художник, Гипотеза),
       приятели (Писатель, павлов, Гипотеза),
       приятели (Художник, павлов, Гипотеза).
       
% Писатель собирается писать очерк о Синицыне и Воронове. 
условие(4, Гипотеза):-
       входит_в(кто_есть_кто(Писатель, писатель), Гипотеза),
       % писатель знает синицына и воронова
       приятели (Писатель, синицын, Гипотеза),
       приятели (Писатель, воронов, Гипотеза).

% Проверка гипотезы       
   проверка_гипотезы(Гипотеза):-
      условие(1, Гипотеза),
      условие(2, Гипотеза),
      условие(3, Гипотеза),
      условие(4, Гипотеза).

% Поиск решения гипотезы       
   поиск_решения(Решение):-
    генерация_гипотезы(Гипотеза),
    проверка_гипотезы(Гипотеза),
  
  Гипотеза = [
        кто_есть_кто(воронов, ПрофессияВоронова),
        кто_есть_кто(павлов, ПрофессияПавлова),
        кто_есть_кто(журавлев, ПрофессияЖуравлева),
        кто_есть_кто(синицын, ПрофессияСиницына),
        приятели (воронов, павлов, _ВороновПавлов),
        приятели (воронов, журавлев, _ВороновЖуравлев),
        приятели (воронов, синицын, _ВороновСиницын),
        приятели (павлов, журавлев, _ПавловЖуравлев),
        приятели (павлов, синицын, _ПавловСиницын),
        приятели (журавлев, синицын, _ЖуравлевСиницын)
       ],
       
       Решение = [
          кто_есть_кто(воронов, ПрофессияВоронова),
          кто_есть_кто(павлов, ПрофессияПавлова),
          кто_есть_кто(журавлев, ПрофессияЖуравлева),
          кто_есть_кто(синицын, ПрофессияСиницына)
       ].
       
   разные_решения(УникальноеРешение):-
     findall(Решение, поиск_решения(Решение), ВсеРешения),
     убрать_повторы(ВсеРешения, [], УникальныеРешения),
     входит_в(УникальноеРешение, УникальныеРешения).
goal 
  разные_решения(Решение).